#!/bin/bash
#PBS -l nodes=1:ppn=20
#PBS -j oe
#PBS -l walltime=20:00:00
#PBS -l mem=60GB
#PBS -l vmem=60GB

# ChIA-PET Tool v2
#         Step 5b: Phase the PETs
# 2017
# The Jackson Laboratory for Genomic Medicine

# The help message:
function usage
{
    echo -e "usage: bash 5b.phase_PETs.pbs -c CONF -o OUT_DIR
    " 
}

# Default values
run="LHG0018"
snp_file="/projects/encode/chiapet_pipeline/SNP_ref/NA12878.SNP.phased.2.bed"
juicer="/projects/tjongh/chiapet_script/encode_singleLinker/\
juicer_tools.1.6.2_linux_jcuda.0.8.jar"
genome="hg19"
out_dir="/projects/capurd/testing_chia_pet"
pipeline_dir="/projects/capurd/chia_pet/refactored/bin"


# Parse arguments from the command line
while [ "$1" != "" ]; do
    case $1 in
        -c | --conf )           shift
                                conf=$1
                                ;;        
        -o | --out_dir )        shift
                                out_dir=$1
                                ;;                                
        -h | --help )           usage
                                exit
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done

# Put output files in subdirectory named after the run
cd ${PBS_O_WORKDIR}
source ${conf}
cd ${out_dir}

## Create name of the log file
log_file=5b.${run}.phase_PETs.log

# Print arguments to ensure correct parsing
echo "
Arguments:
    run=${run}
    snp_file=${snp_file}
    juicer=${juicer}
    genome=${genome}
    out_dir=${out_dir}
" >> ${log_file}

# Load the required modules
#module load bedtools
#module load samtools/0.1.19
#module load java/1.7.0


# Create BAM file name
bam_file=${run}.singlelinker.paired.UU.nr.sorted.bam

# Report start of file conversion 
echo -e "`date` Converting file formats..\n" >> ${log_file}

# Seperate two ends (reads) from BAM file
#samtools sort -@ 16 -f -n ${bam_file} sorted_${bam_file}
samtools view -f 0X40 -h ${bam_file} > ${run}_R1.sam
samtools view -f 0X80 -h ${bam_file} > ${run}_R2.sam

# convert two sam file to one bedpe
${bin_dir}/buildBedpe ${run}_R1.sam ${run}_R2.sam outputbedpe 30 16 1

# Convert 4-column SNP file to intermediary 5-column SNP file 
# for use with BEDTOOLS
cat ${snp_file} | sed -e "s/|/\t/g" > snp.5col

# Report completion of file conversion
echo -e "`date` Completed converting file formats..\n" >> ${log_file}


# Report start of PET phasing
echo -e "`date` Phasing PETs..\n" >> ${log_file}

# Find PETs overlapping SNP at either end
pairToBed -a outputbedpe -b snp.5col -type either > bedpe.flt.bed

# Mark maternal and paternal PETs
${bin_dir}/bedpe2Phased bedpe.flt.bed outputprefix
awk 'NR==FNR{a[$1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6] = $9"\t"$10}NR>FNR{print $0"\t"a[$1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6]}' bedpe.flt.bed outputprefix > outputprefix_2


# Seperate maternal and paternal PETs and convert it to .hic format
awk 'BEGIN{OFS="\t"}{if(($7 ==1 && $8 != 2) || ($7 !=2 && $8 == 1)){print > "PET_P"}else if(($7 ==2 && $8 != 1) || ($7 !=1 && $8 == 2)){print > "PET_M"}}' outputprefix_2


# Report completion of PET phasing
echo -e "`date` Completed phasing PETs..\n" >> ${log_file}


for i in P M
do
    awk 'BEGIN{OFS="\t"}{if($9=="+"){str1=0}else{str1=1};if($10=="+"){str2=0}else{str2=1};printf "%d\t%s\t%d\t%d\t%d\t%s\t%d\t%d\n",str1,$1,($2+$3)/2,0,str2,$4,($5+$6)/2,1}' PET_${i} > PET_${i}_sf.txt
    
    awk '{if($2>$6) {printf("%s %s %s %s %s %s %s %s\n",$5, $6, $7, $8, $1, $2, $3, $4);} else {printf("%s %s %s %s %s %s %s %s\n",$1, $2, $3, $4, $5, $6, $7, $8);}}' PET_${i}_sf.txt > PET_${i}_sf.2.txt
    
    LC_ALL=C sort -k2,2d -k6,6d PET_${i}_sf.2.txt > PET_${i}_sf.3.txt
    
    # Report start of juicer file generation
    echo -e "`date` Generating ${i}aternal juicer file..\n" >> ${log_file}
    
    # Make juicer file
    java -Xmx32g -jar ${juicer} pre -r \
        2500000,1000000,500000,250000,100000,50000,25000,10000,5000,1000 \
        PET_${i}_sf.3.txt PET_${i}_sf.hic ${genome}
    
    # Report completion of juicer file generation
    echo -e "`date` Completed ${i}aternal juicer file..\n" >> ${log_file}
done

echo "$0 done" >> ${log_file}
echo "`date`" >> ${log_file}
