#!/bin/bash
#PBS -l nodes=1:ppn=20
#PBS -l walltime=20:00:00
#PBS -l mem=60GB
#PBS -l vmem=60GB
#PBS -j oe

## Map single-end reads
#   Retain uniquely-mapped, non-redundant reads
#   2018
#   The Jackson Laboratory for Genomic Medicine

## The help message:
function usage
{
    echo -e "usage: qsub -F \"--conf CONF\" map_single-end.pbs
    " 
}

## Parse arguments from the command line
while [ "$1" != "" ]; do
    case $1 in
        -c | --conf )           shift
                                conf=$1
                                ;;
        -h | --help )           usage
                                exit
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done

## Move to working directory and source config file
cd ${PBS_O_WORKDIR}
source ${conf}

## Move to subdirectory for the run
mkdir -p ${run}
cd ${run}

## Load modules
module load bwa/0.7.7 
module load samtools/1.5
module load bedtools/2.22.0

## Trim adapters (?)

## Map reads
r1_file=${data_dir}/${r1_fastq}
r2_file=${data_dir}/${r2_fastq}

if [ -f ${r2_file} ]; then
    bwa mem ${fasta} ${r1_file} ${r2_file} > ${run}.sam
else
    bwa mem ${fasta} ${r1_file} > ${run}.sam

## Convert SAM to BAM
samtools view -S -b ${run}.sam > ${run}.bam

## Retain only uniquely-mapped, high-quality reads
samtools view -F 4 -q 30 -b ${run}.bam > ${run}.q30.bam

## Sort BAM
samtools sort ${run}.q30.bam -o ${run}.q30.sorted.bam

## Remove duplicate reads
samtools rmdup -s ${run}.q30.sorted.bam ${run}.q30.sorted.nr.bam

## Make bedgraph
bedtools genomecov -ibam ${run}.q30.sorted.nr.bam \
    -bg > ${run}.q30.sorted.nr.bedgraph

## Report QC metrics
out_file=${run}.final_stats.tsv
rm -f ${out_file}

## Get library ID
echo -e "Library_ID\t"${run} >> ${out_file}

# Get library type
echo -e "Library_type\t"${run_type} >> ${out_file}

# Get reference genome
echo -e "Reference_genome\t"${genome} >> ${out_file}

# Get cell type
echo -e "Cell_type\t"${cell_type} >> ${out_file}

# Get IP factor
echo -e "Factor\t"${ip_factor} >> ${out_file}

# Total reads
n_reads=$( echo "$( zcat ${r1_file} | wc -l ) / 4" | bc )
echo -e "Total_reads\t"${n_reads} >> ${out_file}

# Get uniquely-mapped read count
unique=$( samtools view ${run}.q30.bam | wc -l )

# Get non-redundant read count
nr=$( samtools view ${run}.q30.sorted.nr.bam | wc -l )

# Compute redundancy
redun=$( echo "(${unique} - ${nr}) / ${unique}" | bc -l )

# Write uniquely-mapped read count
unique=$( printf "%'.f" ${unique} )
echo -e "Uniquely_mapped_reads\t"${unique} >> ${out_file}

# Write non-redundant read count
nr=$( printf "%'.f" ${nr} )
echo -e "Non-redundant_reads\t"${nr} >> ${out_file}

# Write redundancy
redun=$( printf %.2f ${redun} )
echo -e "Redundancy\t"${redun} >> ${out_file}

## Remove intermediate files
rm ${run}.sam
rm ${run}.bam
rm ${run}.q30.bam
rm ${run}.q30.sorted.bam

## Rename files if this is an input-control sample
if [ ${ip_factor} == "none" ]; then
    prefix="${cell_type}_input_${genome}_${run}"
    mv ${run}.q30.sorted.nr.bam ${prefix}.bam
    mv ${run}.q30.sorted.nr.bedgraph ${prefix}.bedgraph
fi
